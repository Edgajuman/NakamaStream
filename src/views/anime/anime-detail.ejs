<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= anime.name %> - NakamaStream</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <link rel="stylesheet" href="/src/public/css/anime-list.css">
    <link rel="stylesheet" href="/src/public/css/main-color/color.css">
    <link rel="stylesheet" href="/src/public/css/view-counter.css">
    <style>
        body {
            font-family: 'Nunito', sans-serif;
            background-color: #f0f4f8;
            background-repeat: repeat;
        }
        .anime-card {
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        .anime-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }
        .star {
            font-size: 28px;
            color: #ffd700;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .star:hover {
            transform: scale(1.2);
        }
        .star.active {
            color: #ffaa00;
        }
        .admin-badge {
            background-color: #ff4757;
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: bold;
            text-transform: uppercase;
        }
        .username-badge {
            background-color: #2ed573;
            color: white;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: bold;
        }
        .button-anime {
            transition: all 0.3s ease;
            border-radius: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        .button-anime:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }
        .comment-box {
            background-color: #f1f2f6;
            border-radius: 15px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
        }
        .comment-box:hover {
            background-color: #e2e5e9;
        }
    </style>
</head>
<body class="bg-gray-100">
    <nav class="bg-gray-ff6b6b text-white shadow-md">
        <div class="container mx-auto px-6 py-4">
            <div class="flex justify-between items-center">
                <div class="flex items-center">
                    <img src="https://github.com/NakamaStream/Resources/blob/main/NakamStream-logo-HD-removebg.png?raw=true" alt="NakamaStream Logo" class="h-8 w-8 mr-2">
                    <a href="/anime" class="text-2xl font-bold text-orange-500">NakamaStream</a>
                    <div class="relative group dropdown">
                        <a href="#" class="nav-link ml-8 flex items-center" id="explore-menu-button" tabindex="0">
                            Explorar
                            <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </a>
                        <div id="explore-menu" class="absolute left-0 bg-gray-ff6b6b text-white rounded-md shadow-lg mt-2 py-2 w-96 z-20 grid grid-cols-3 gap-4">
                            <div>
                                <h3 class="px-4 py-2 font-bold">Destacados</h3>
                                <a href="#" class="block px-4 py-2">Popular</a>
                                <a href="#" class="block px-4 py-2">Novedades</a>
                                <a href="#" class="block px-4 py-2">Alfabético</a>
                                <a href="#" class="block px-4 py-2">Temporada de Simulcasts</a>
                                <a href="#" class="block px-4 py-2">Calendario de lanzamientos</a>
                            </div>
                            <div>
                                <h3 class="px-4 py-2 font-bold">Géneros</h3>
                                <a href="#" class="block px-4 py-2">Acción</a>
                                <a href="#" class="block px-4 py-2">Aventura</a>
                                <a href="#" class="block px-4 py-2">Comedia</a>
                                <a href="#" class="block px-4 py-2">Drama</a>
                                <a href="#" class="block px-4 py-2">Fantasía</a>
                            </div>
                            <div>
                                <a href="#" class="block px-4 py-2">Musical</a>
                                <a href="#" class="block px-4 py-2">Romance</a>
                                <a href="#" class="block px-4 py-2">Ciencia Ficción</a>
                                <a href="#" class="block px-4 py-2">Shounen</a>
                                <a href="#" class="block px-4 py-2">Thriller</a>
                            </div>
                        </div>
                    </div>
                    <a href="#" class="nav-link ml-8">Noticias</a>
                </div>
                <div class="flex items-center">
                    <div class="flex items-center">                                                                                                                                                                                                                                                                                                       
                    <a href="/animes/api/saved-animes" class="mr-4 nav-link">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5v16l7-7 7 7V5a2 2 0 00-2-2H7a2 2 0 00-2 2z"></path>
                        </svg>
                    </a>
                    <% if (user) { %>
                    <div class="relative profile-menu">
                        <img src="<%= user.profile_image_url || '/default-profile-image.png' %>" alt="Profile Picture" class="h-8 w-8 rounded-full cursor-pointer" id="profile-menu-button" tabindex="0">
                        <div id="profile-menu" class="absolute right-0 mt-2 w-64 bg-gray-ff6b6b rounded-md shadow-lg py-3 z-20 text-white">
                            <div class="flex items-center px-4 pb-2 bg-gray-ff6b6b">
                                <img src="<%= user.profile_image_url || '/default-profile-image.png' %>" alt="Profile Picture" class="h-10 w-10 rounded-full">
                                <div class="ml-3">
                                    <span class="block text-sm font-bold"><%= user.username %></span>
                                    <span class="text-xs text-yellow-400">Miembro Premium</span>
                                </div>
                            </div>
                            <a href="/profile" class="block px-4 py-2 text-sm hover:bg-gray-700 hover:text-yellow-400 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill mr-2" viewBox="0 0 16 16">
                                    <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6"/>
                                </svg>
                                Perfil
                            </a>
                            <a href="/animes/api/saved-animes" class="block px-4 py-2 text-sm hover:bg-gray-700 hover:text-yellow-400 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark-fill mr-2" viewBox="0 0 16 16">
                                    <path d="M2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2"/>
                                </svg>
                                Guardados
                            </a>
                            <a href="/profile" class="block px-4 py-2 text-sm hover:bg-gray-700 hover:text-yellow-400 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M9.049 2.927a1 1 0 011.902 0l.917 4.585h4.85a1 1 0 01.608 1.786l-3.9 3.012 1.493 4.657a1 1 0 01-1.537 1.144L10 15.347l-4.383 2.764a1 1 0 01-1.537-1.144l1.493-4.657-3.9-3.012a1 1 0 01.608-1.786h4.85l.917-4.585z" />
                                </svg>
                                Favoritos
                            </a>
                            <% if (user.isAdmin) { %>
                            <div class="bg-gray-ff6b6b mt-2"></div>
                            <a href="/admin/panel" class="block px-4 py-2 text-sm hover:bg-gray-700 hover:text-yellow-400 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm-2-5a2 2 0 114 0h-4z" clip-rule="evenodd" />
                                </svg>
                                Panel de Admin
                            </a>
                            <a href="/anime/upload" class="block px-4 py-2 text-sm hover:bg-gray-700 hover:text-yellow-400 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-arrow-up-fill mr-2" viewBox="0 0 16 16">
                                    <path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2m2.354 5.146a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708l2-2a.5.5 0 0 1 .708 0z"/>
                                </svg>
                                Subir Anime
                            </a>
                            <% } %>
                            <a href="/logout" class="block px-4 py-2 text-sm hover:bg-gray-700 hover:text-red-400 flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-door-closed-fill mr-2" viewBox="0 0 16 16">
                                    <path d="M12 1a1 1 0 0 1 1 1v13h1.5a.5.5 0 0 1 0 1h-13a.5.5 0 0 1 0-1H3V2a1 1 0 0 1 1-1zm-2 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2"/>
                                </svg>
                                Desconectar
                            </a>
                        </div>
                    </div>
                    <% } else { %>
                    <a href="/login" class="nav-link">Iniciar sesión</a>
                    <% } %>
                    </div>                    
                </div>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6 animate__animated animate__fadeIn">
            <h1 class="text-4xl font-bold anime-titles"><%= anime.name %></h1>
        </div>
        <div class="flex flex-col md:flex-row gap-8 anime-card p-6 animate__animated animate__fadeInUp">
            <div class="md:w-1/3">
                <img src="<%= anime.imageUrl %>" alt="<%= anime.name %>" class="w-full rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300">
                
                <div class="mt-4">
                    <button id="favoriteBtn" class="button-anime bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full w-full">
                        <span id="favoriteText">Agregar a favoritos</span>
                    </button>
                    <span class="block mt-2 text-center font-semibold">Favoritos: <span id="favoriteCount" class="text-indigo-600">0</span></span>
                </div>
                    
                <div class="mt-4">
                    <button id="saveAnimeBtn" class="button-anime bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-full w-full">
                        Guardar para más tarde
                    </button>
                </div>

                <div class="mt-4">
                    <div class="rating flex justify-center">
                        <% for (let i = 1; i <= 5; i++) { %>
                            <span class="star cursor-pointer text-3xl transition-all duration-300 hover:scale-125" data-rating="<%= i %>">☆</span>
                        <% } %>
                    </div>
                    <span class="block mt-2 text-center font-semibold">
                        Calificación promedio: <span id="averageRating" class="text-indigo-600">0.0</span> 
                        (<span id="ratingCount" class="text-indigo-600">0</span> votos)
                    </span>
                </div>
            </div>
            
            <div class="md:w-2/3">
                <p class="text-lg mb-6 text-gray-700 leading-relaxed"><%= anime.description %></p>

                <h2 class="text-2xl font-semibold mb-4 anime-titles">Episodios</h2>
                <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mb-6">
                <% episodes.forEach((episode) => { %>
                    <a href="/anime/<%= anime.slug %>/episode/<%= episode.episode_number %>" 
                    class="btm-episode text-center font-bold">
                    Episodio <%= episode.episode_number %>
                    </a>
                <% }) %>
                </div>

                <% if (user && user.isAdmin) { %>
                    <div class="mt-8">
                        <a href="/anime/<%= anime.slug %>/upload-episode" class="button-anime bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-full transition duration-300">
                            Subir Nuevo Episodio
                        </a>
                    </div>
                <% } %>
            </div>
            <div class="view-counter"></div>
            <svg class="eye-icon" viewBox="0 0 24 24" width="24" height="24">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                <circle cx="12" cy="12" r="3"></circle>
            </svg>
            <span class="view-count"><%= views %></span>
        </div>
        </div>

        

        <!-- Sección de comentarios -->
        <div class="mt-8 anime-card p-6 animate__animated animate__fadeInUp">
            <h3 class="text-2xl font-semibold mb-4 text-indigo-800">Comentarios</h3>
            <% if (user) { %>
            <form id="commentForm" class="mb-6">
                <textarea id="commentContent" class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" rows="3" placeholder="Escribe tu comentario"></textarea>
                <button type="submit" class="button-anime mt-2 bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-full">
                    Enviar comentario
                </button>
            </form>
            <% } else { %>
            <p class="mb-6 text-gray-600">Debes iniciar sesión para comentar.</p>
            <% } %>
            <div id="commentsList">
                <!-- Los comentarios se cargarán aquí dinámicamente -->
            </div>
        </div>
    </div>

    <!-- Modal para la información del usuario -->
    <div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
            <div class="flex items-center mb-4">
                <img id="modalUserImage" src="" alt="" class="w-16 h-16 rounded-full mr-4">
                <div>
                    <h2 id="modalUsername" class="text-2xl font-bold"></h2>
                    <p id="modalUserEmail" class="text-gray-600"></p>
                </div>
            </div>
            <p id="modalUserBio" class="mb-4"></p>
            <button class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700" onclick="closeUserModal()">Close</button>
        </div>
    </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const favoriteBtn = document.getElementById('favoriteBtn');
        const favoriteText = document.getElementById('favoriteText');
        const favoriteCount = document.getElementById('favoriteCount');
        const averageRating = document.getElementById('averageRating');
        const ratingCount = document.getElementById('ratingCount');
        const stars = document.querySelectorAll('.star');
        const saveAnimeBtn = document.getElementById('saveAnimeBtn');
    
        function updateFavoriteButton(isFavorite) {
            if (isFavorite) {
                favoriteText.textContent = 'Quitar de favoritos';
                gsap.to(favoriteBtn, {
                    backgroundColor: '#f56565',
                    duration: 0.3,
                    ease: 'power2.out'
                });
            } else {
                favoriteText.textContent = 'Agregar a favoritos';
                gsap.to(favoriteBtn, {
                    backgroundColor: '#4299e1',
                    duration: 0.3,
                    ease: 'power2.out'
                });
            }
        }
    
        function updateSaveButton(isSaved) {
            if (isSaved) {
                saveAnimeBtn.textContent = 'Quitar de guardados';
                gsap.to(saveAnimeBtn, {
                    backgroundColor: '#f56565',
                    duration: 0.3,
                    ease: 'power2.out'
                });
            } else {
                saveAnimeBtn.textContent = 'Guardar para más tarde';
                gsap.to(saveAnimeBtn, {
                    backgroundColor: '#48bb78',
                    duration: 0.3,
                    ease: 'power2.out'
                });
            }
        }
    
        function updateStars(rating) {
            stars.forEach((star, index) => {
                if (index < rating) {
                    gsap.to(star, {
                        color: '#ffd700',
                        scale: 1.2,
                        duration: 0.3,
                        ease: 'back.out(1.7)'
                    });
                    star.textContent = '⭐';
                } else {
                    gsap.to(star, {
                        color: '#ccc',
                        scale: 1,
                        duration: 0.3,
                        ease: 'power2.out'
                    });
                    star.textContent = '☆';
                }
            });
        }
    
        function animateCountChange(element, newValue) {
            gsap.to(element, {
                innerHTML: newValue,
                duration: 1,
                ease: 'power2.out',
                snap: { innerHTML: 1 }
            });
        }
    
        function loadAnimeData() {
            fetch(`/anime/<%= anime.slug %>/data`)
                .then(response => response.json())
                .then(data => {
                    animateCountChange(favoriteCount, data.favoriteCount);
                    animateCountChange(averageRating, data.averageRating ? data.averageRating.toFixed(1) : '0.0');
                    animateCountChange(ratingCount, data.ratingCount);
                    updateFavoriteButton(data.isFavorite);
                    updateSaveButton(data.isSaved);
                    if (data.userRating) {
                        updateStars(data.userRating);
                    }
                })
                .catch(error => console.error('Error loading data:', error));
        }
    
        favoriteBtn.addEventListener('click', () => {
            const action = favoriteText.textContent === 'Agregar a favoritos' ? 'add' : 'remove';
            fetch(`/anime/<%= anime.slug %>/favorite`, { 
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ animeId: <%= anime.id %>, action: action })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadAnimeData();
                    gsap.from(favoriteBtn, {
                        scale: 0.5,
                        opacity: 0,
                        duration: 0.5,
                        ease: 'back.out(1.7)'
                    });
                    Swal.fire({
                        icon: 'success',
                        title: 'Éxito',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message
                    });
                }
            });
        });
    
        saveAnimeBtn.addEventListener('click', () => {
            fetch(`/anime/<%= anime.slug %>/toggle-save`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ animeId: <%= anime.id %> })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateSaveButton(data.isSaved);
                    gsap.from(saveAnimeBtn, {
                        y: -20,
                        opacity: 0,
                        duration: 0.5,
                        ease: 'back.out(1.7)'
                    });
                    Swal.fire({
                        icon: 'success',
                        title: data.isSaved ? 'Guardado' : 'Eliminado',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message
                    });
                }
            });
        });
    
        stars.forEach(star => {
            star.addEventListener('click', () => {
                const rating = star.dataset.rating;
                fetch(`/anime/<%= anime.slug %>/rate`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ animeId: <%= anime.id %>, rating })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateStars(rating);
                        loadAnimeData();
                        gsap.from(star, {
                            rotate: 360,
                            scale: 1.5,
                            duration: 0.5,
                            ease: 'back.out(1.7)'
                        });
                        Swal.fire({
                            icon: 'success',
                            title: 'Éxito',
                            text: data.message,
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message
                        });
                    }
                });
            });
        });
        
        document.getElementById('commentForm').addEventListener('submit', (e) => {
        e.preventDefault();
        const content = document.getElementById('commentContent').value.trim();

        // Lista de palabras prohibidas
        const forbiddenWords = [
            'https://', 
            'http://', 
            'porhub.com',
            'xvideos.com',
            'xnxx.com',
            'porn.com',
            'sex.com',
            'nude.com',
            'mature.com',
            'rule34.xxx',
            'porno',
            'rule34',
            'Cp',
            'gay',
            'pendejo',
            'mierda',
            'idiota',
            'zorra',
            'estupido',
            'estupida',
            'maricon',
            'animeonegai',
            'crunchyroll',
            'animeflv',
            'jkanime',
            'MonosChinos'
        ]; 

        // Verificar si el contenido contiene palabras prohibidas
        const containsForbiddenWords = forbiddenWords.some(word => {
            const wordRegex = new RegExp(word, 'i'); // Ignorar mayúsculas
            return wordRegex.test(content);
        });

        if (containsForbiddenWords) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Tu comentario contiene palabras no permitidas.'
            });
            return;
        }

        if (content === '') {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Por favor, introduce un comentario válido.'
            });
            return;
        }

        // Realizar la solicitud POST solo si el contenido es válido
        fetch(`/anime/<%= anime.slug %>/comment`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ animeId: <%= anime.id %>, content })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Comentario agregado',
                    showConfirmButton: false,
                    timer: 1400
                });
                document.getElementById('commentContent').value = '';
                loadComments();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message
                });
            }
        });
    });
    
        function loadComments() {
            fetch(`/anime/<%= anime.slug %>/comments?animeId=<%= anime.id %>`)
            .then(response => response.json())
            .then(comments => {
                const commentsList = document.getElementById('commentsList');
                commentsList.innerHTML = '';
                comments.forEach((comment, index) => {
                    const commentElement = document.createElement('div');
                    commentElement.className = 'comment-box mb-4 p-4 bg-gray-100 rounded opacity-0';
                    commentElement.innerHTML = `
                        <div class="flex items-center mb-2">
                            <img src="${comment.profile_image_url || '/default-profile-image.png'}" alt="${comment.username}" class="w-10 h-10 rounded-full mr-3 cursor-pointer">
                            <div>
                                <a href="/profile/${comment.username}" class="font-bold hover:text-indigo-600">${comment.username}</a>
                                <span class="text-sm font-normal"></span>
                                ${comment.is_admin ? '<span class="admin-badge">Admin</span>' : ''}
                                <p class="text-sm text-gray-500">${new Date(comment.created_at).toLocaleString()}</p>
                            </div>
                        </div>
                        <p class="mt-2">${comment.content}</p>
                    `;
                    commentsList.appendChild(commentElement);
                    
                    commentElement.querySelector('img').addEventListener('click', () => {
                        showUserModal(comment.username);
                    });
    
                    gsap.to(commentElement, {
                        opacity: 1,
                        y: 0,
                        duration: 0.5,
                        delay: index * 0.1,
                        ease: 'power2.out'
                    });
                });
            });
        }
        
        function showUserModal(username) {
            fetch(`/api/user/${username}`)
                .then(response => response.json())
                .then(user => {
                    document.getElementById('modalUserImage').src = user.profile_image_url || '/default-profile-image.png';
                    document.getElementById('modalUsername').textContent = user.username;
                    document.getElementById('modalUserEmail').textContent = user.email;
                    document.getElementById('modalUserBio').textContent = user.bio || 'No bio available';
                    document.getElementById('userModal').classList.remove('hidden');
                });
        }
    
        window.closeUserModal = function() {
            document.getElementById('userModal').classList.add('hidden');
        }
        
        loadAnimeData();
        loadComments();
    });
    
        // Añade esto al final de tu archivo anime-detail.js
    function updateViewCounter() {
        const animeId = document.getElementById('anime-id').value;
        const viewCounter = document.querySelector('.view-counter');
        const viewCountSpan = viewCounter.querySelector('.view-count');
    
        fetch(`/api/anime/${animeId}/views`)
            .then(response => response.json())
            .then(data => {
                viewCountSpan.textContent = data.views;
                viewCounter.classList.add('updating');
                setTimeout(() => {
                    viewCounter.classList.remove('updating');
                }, 500);
            });
    }
    
    // Actualizar cada 30 segundos
    setInterval(updateViewCounter, 30000);
        
    </script>
</body>
</html>
