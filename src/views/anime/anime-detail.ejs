<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= anime.name %> - NakamaStream</title>
    <link rel="shortcut icon" href="https://github.com/NakamaStream/Resources/blob/main/NakamStream-logo-HD-removebg.png?raw=true" type="image/x-icon">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/src/public/css/anime-list.css">
    <link rel="stylesheet" href="/src/public/css/anime-detail.css">
    <link rel="stylesheet" href="/src/public/css/main-color/color.css">
    <link rel="stylesheet" href="/src/public/css/badges.css">
</head>
<body class="bg-gray-100">
    <nav class="bg-white shadow-md">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex justify-between h-16">
            <div class="flex items-center">
              <div class="flex-shrink-0 flex items-center">
                <a href="/" class="flex flex-col items-center">
                  <span class="text-4xl font-bold text-primary">NakamaStream</span>
                  <span class="text-primary text-xs mt-0.5" style="line-height: 1;">By NakamaGroup</span>
                </a>
              </div>
              <div class="md:flex ml-6 space-x-8">
                <a href="/" class="border-orange-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
                  Inicio
                </a>
                <a href="/news" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
                  Noticias
                </a>
                <a href="/calendario" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
                  Calendario
                </a>
              </div>
            </div>
            <div class="flex items-center">
              <div class="relative md:block">
              </div>
              <a href="/animes/api/saved-animes" class="ml-3">
                <button class="bg-white p-2 rounded-full text-gray-400 hover:text-primary hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition duration-150 ease-in-out">
                  <span class="sr-only">Ver marcadores</span>
                  <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>  
                </button>
              </a>                                    
              <div class="ml-3 relative">
                <button id="user-menu-button" class="bg-white rounded-full flex text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500" aria-haspopup="true" aria-expanded="true">
                  <span class="sr-only">Abrir menú de usuario</span>
                  <img src="<%= user.profile_image_url || 'https://avatars.githubusercontent.com/u/168317328?s=200&v=4' %>" alt="User Avatar" class="h-8 w-8 rounded-full">
                </button>
              
                <!-- Menú desplegable -->
                <div id="user-menu" class="absolute right-0 z-10 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 hidden transition-all duration-200 transform opacity-0 scale-95" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button">
                  <div class="py-1" role="none">
                    <p class="block px-4 py-2 text-sm text-gray-700"><%= user.username %></p>
                    <div class="border-b border-gray-200"></div>
                    <a href="/profile" class="user-menu-link flex items-center px-4 py-2 text-sm text-gray-700" role="menuitem">
                      <i class="fas fa-user mr-2"></i> Perfil
                    </a>
                    <a href="/animes/api/saved-animes" class="user-menu-link flex items-center px-4 py-2 text-sm text-gray-700" role="menuitem">
                      <i class="fa-solid fa-bookmark mr-2"></i> Guardados
                    </a>
                    <a href="/profile" class="user-menu-link flex items-center px-4 py-2 text-sm text-gray-700" role="menuitem">
                      <i class="fa-solid fa-star mr-2"></i> Favoritos
                    </a>
                    <% if (isAdmin) { %>
                      <div class="border-t mt-2"></div> <!-- Separador opcional -->
                      <a href="/admin/panel" class="user-menu-link flex items-center px-4 py-2 text-sm text-gray-700" role="menuitem">
                        <i class="fa-solid fa-lock mr-2"></i> Panel de Admin
                      </a>
                      <a href="/anime/upload" class="user-menu-link flex items-center px-4 py-2 text-sm text-gray-700" role="menuitem">
                        <i class="fa-solid fa-upload mr-2"></i> Subir Anime
                      </a>
                      <a href="/admin/animes/featured" class="user-menu-link flex items-center px-4 py-2 text-sm text-gray-700" role="menuitem">
                        <i class="fa-solid fa-star mr-2"></i> Subir Anime Destacado
                      </a>
                    <% } %>
                    <a href="/logout" class="user-menu-link flex items-center px-4 py-2 text-sm text-gray-700" role="menuitem">
                      <i class="fas fa-sign-out-alt mr-2"></i> Cerrar sesión
                    </a>                    
                  </div>
                </div>
              </div>                          
            </div>
          </div>
        </div>
      </nav>

      <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6 animate__animated animate__fadeIn">
            <h1 class="text-4xl font-bold anime-titles"><%= anime.name %></h1>
        </div>

        <div class="flex flex-col md:flex-row gap-8 anime-card p-6 animate__animated animate__fadeInUp">
            <div class="md:w-1/3">
                <img src="<%= anime.imageUrl %>" alt="<%= anime.name %>" class="w-full rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300">

                <!-- Contador de vistas -->
                <div class="view-counter flex justify-center items-center mt-6 p-4 bg-white rounded-lg shadow-lg border border-gray-200">
                    <i class="fas fa-eye text-ff6b6b text-2xl mr-3"></i>
                    <span class="view-count text-xl font-bold text-gray-800"><%= views %> vistas</span>
                </div>

                <div class="mt-4">
                    <button id="favoriteBtn" class="button-anime bg-blue-500 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-full w-full">
                        <span id="favoriteText">Agregar a favoritos</span>
                    </button>
                    <span class="block mt-2 text-center font-semibold">Favoritos: <span id="favoriteCount" class="text-indigo-600">0</span></span>
                </div>
                    
                <div class="mt-4">
                    <button id="saveAnimeBtn" class="button-anime bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-full w-full">
                        Guardar para más tarde
                    </button>
                </div>
    
                <div class="mt-4">
                    <div class="rating flex justify-center">
                        <% for (let i = 1; i <= 5; i++) { %>
                            <span class="star cursor-pointer text-3xl transition-all duration-300 hover:scale-125" data-rating="<%= i %>">☆</span>
                        <% } %>
                    </div>
                    <span class="block mt-2 text-center font-semibold">
                        Calificación promedio: <span id="averageRating" class="text-indigo-600">0.0</span> 
                        (<span id="ratingCount" class="text-indigo-600">0</span> votos)
                    </span>
                </div>
            </div>
            
            <div class="md:w-2/3">
                <p id="animeDescription" class="text-lg mb-6 text-gray-700 leading-relaxed">
                    <%= anime.description %>
                </p>

                <div class="flex justify-start items-center mb-6 animate-fade-in">
                    <div class="flex items-center space-x-3 px-4 py-2 bg-white rounded-full shadow-md border border-gray-200 transition-all duration-300 hover:shadow-lg">
                        <span class="flex-shrink-0 w-3 h-3 rounded-full <%= anime.status === 'ongoing' ? 'bg-green-500 animate-pulse' : 'bg-blue-500' %>"></span>
                        <span class="text-lg font-semibold text-gray-800">
                            <%= anime.status === 'ongoing' ? 'En Emisión' : 'Completado' %>
                        </span>
                        <% if (anime.status === 'ongoing') { %>
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        <% } else { %>
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        <% } %>
                    </div>
                </div>                
    
                <h2 class="text-2xl font-semibold mb-4 anime-titles">Episodios</h2>
                <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 mb-6">
                <% episodes.forEach((episode) => { %>
                    <a href="/anime/<%= anime.slug %>/episode/<%= episode.episode_number %>" 
                    class="btm-episode text-center font-bold">
                    Episodio <%= episode.episode_number %>
                    </a>
                <% }) %>
                </div>
    
                <% if (user && user.isAdmin) { %>
                    <div class="mt-8">
                        <a href="/anime/<%= anime.slug %>/upload-episode" class="button-anime bg-gray-ff6b6b hover:bg-gray-e55b5b text-white font-bold py-3 px-6 rounded-full transition duration-300">
                            Subir Nuevo Episodio
                        </a>
                    </div>
                <% } %>
            </div>
        </div>   


        <!-- Sección de comentarios -->
        <div class="mt-8 anime-card p-6 animate__animated animate__fadeInUp">
            <h3 class="text-2xl font-semibold mb-4 anime-titles">Comentarios</h3>
            
            <% if (user) { %>
            <form id="commentForm" class="mb-6">
                <div id="imagePreviewContainer"></div>
                <textarea id="commentContent" class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500" rows="3" placeholder="Escribe tu comentario"></textarea>
                <button type="submit" class="button-anime mt-2 btm-episode text-white font-bold py-3 px-6 rounded-full">
                    Enviar comentario
                </button>

            </form>
            <% } else { %>
            <p class="mb-6 text-gray-600">Debes iniciar sesión para comentar.</p>
            <% } %>
            <div id="commentsList">
                <!-- Los comentarios se cargarán aquí dinámicamente -->
            </div>
        </div>
    </div>

    <!-- Modal para la información del usuario -->
    <div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
            <div class="flex items-center mb-4">
                <img id="modalUserImage" src="" alt="" class="w-16 h-16 rounded-full mr-4">
                <div>
                    <h2 id="modalUsername" class="text-2xl font-bold"></h2>
                    <p id="modalUserEmail" class="text-gray-600"></p>
                </div>
            </div>
            <p id="modalUserBio" class="mb-4"></p>
            <button class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700" onclick="closeUserModal()">Close</button>
        </div>
    </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="/src/public/js/anime/profile-anime-menu.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const favoriteBtn = document.getElementById('favoriteBtn');
        const favoriteText = document.getElementById('favoriteText');
        const favoriteCount = document.getElementById('favoriteCount');
        const averageRating = document.getElementById('averageRating');
        const ratingCount = document.getElementById('ratingCount');
        const stars = document.querySelectorAll('.star');
        const saveAnimeBtn = document.getElementById('saveAnimeBtn');
    
        function updateFavoriteButton(isFavorite) {
            if (isFavorite) {
                favoriteText.textContent = 'Quitar de favoritos';
                gsap.to(favoriteBtn, {
                    backgroundColor: '#f56565',
                    duration: 0.3,
                    ease: 'power2.out'
                });
            } else {
                favoriteText.textContent = 'Agregar a favoritos';
                gsap.to(favoriteBtn, {
                    backgroundColor: '#4299e1',
                    duration: 0.3,
                    ease: 'power2.out'
                });
            }
        }
    
        function updateSaveButton(isSaved) {
            if (isSaved) {
                saveAnimeBtn.textContent = 'Quitar de guardados';
                gsap.to(saveAnimeBtn, {
                    backgroundColor: '#f56565',
                    duration: 0.3,
                    ease: 'power2.out'
                });
            } else {
                saveAnimeBtn.textContent = 'Guardar para más tarde';
                gsap.to(saveAnimeBtn, {
                    backgroundColor: '#48bb78',
                    duration: 0.3,
                    ease: 'power2.out'
                });
            }
        }
    
        function updateStars(rating) {
            stars.forEach((star, index) => {
                if (index < rating) {
                    gsap.to(star, {
                        color: '#ffd700',
                        scale: 1.2,
                        duration: 0.3,
                        ease: 'back.out(1.7)'
                    });
                    star.textContent = '⭐';
                } else {
                    gsap.to(star, {
                        color: '#ccc',
                        scale: 1,
                        duration: 0.3,
                        ease: 'power2.out'
                    });
                    star.textContent = '☆';
                }
            });
        }
    
        function animateCountChange(element, newValue) {
            gsap.to(element, {
                innerHTML: newValue,
                duration: 1,
                ease: 'power2.out',
                snap: { innerHTML: 1 }
            });
        }
    
        function loadAnimeData() {
            fetch(`/anime/<%= anime.slug %>/data`)
                .then(response => response.json())
                .then(data => {
                    animateCountChange(favoriteCount, data.favoriteCount);
                    animateCountChange(averageRating, data.averageRating ? data.averageRating.toFixed(1) : '0.0');
                    animateCountChange(ratingCount, data.ratingCount);
                    updateFavoriteButton(data.isFavorite);
                    updateSaveButton(data.isSaved);
                    if (data.userRating) {
                        updateStars(data.userRating);
                    }
                })
                .catch(error => console.error('Error loading data:', error));
        }
    
        favoriteBtn.addEventListener('click', () => {
            const action = favoriteText.textContent === 'Agregar a favoritos' ? 'add' : 'remove';
            fetch(`/anime/<%= anime.slug %>/favorite`, { 
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ animeId: <%= anime.id %>, action: action })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadAnimeData();
                    gsap.from(favoriteBtn, {
                        scale: 0.5,
                        opacity: 0,
                        duration: 0.5,
                        ease: 'back.out(1.7)'
                    });
                    Swal.fire({
                        icon: 'success',
                        title: 'Éxito',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message
                    });
                }
            });
        });
    
        saveAnimeBtn.addEventListener('click', () => {
            fetch(`/anime/<%= anime.slug %>/toggle-save`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ animeId: <%= anime.id %> })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateSaveButton(data.isSaved);
                    gsap.from(saveAnimeBtn, {
                        y: -20,
                        opacity: 0,
                        duration: 0.5,
                        ease: 'back.out(1.7)'
                    });
                    Swal.fire({
                        icon: 'success',
                        title: data.isSaved ? 'Guardado' : 'Eliminado',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message
                    });
                }
            });
        });
    
        stars.forEach(star => {
            star.addEventListener('click', () => {
                const rating = star.dataset.rating;
                fetch(`/anime/<%= anime.slug %>/rate`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ animeId: <%= anime.id %>, rating })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateStars(rating);
                        loadAnimeData();
                        gsap.from(star, {
                            rotate: 360,
                            scale: 1.5,
                            duration: 0.5,
                            ease: 'back.out(1.7)'
                        });
                        Swal.fire({
                            icon: 'success',
                            title: 'Éxito',
                            text: data.message,
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message
                        });
                    }
                });
            });
        });

        document.getElementById('commentContent').addEventListener('input', (e) => {
            const content = e.target.value.trim();

            // Regex para detectar URLs de imágenes
            const imageUrlRegex = /(https?:\/\/.*\.(?:png|jpg|jpeg|gif))/i;
            const match = content.match(imageUrlRegex);

            // Elemento de vista previa
            const previewContainer = document.getElementById('imagePreviewContainer');
            
            if (match) {
                // Si se encuentra una URL de imagen
                const imageUrl = match[0];
                previewContainer.innerHTML = `<img src="${imageUrl}" alt="Vista previa de la imagen" style="max-width: 100%; margin-top: 10px;"/>`;
            } else {
                // Si no hay URL de imagen, limpiar el contenedor de vista previa
                previewContainer.innerHTML = '';
            }
        });

        document.getElementById('commentForm').addEventListener('submit', (e) => {
            e.preventDefault();
            const content = document.getElementById('commentContent').value.trim();

            // Lista de palabras prohibidas
            const forbiddenWords = [
                'porhub.com', 'xvideos.com', 'xnxx.com', 'porn.com', 'sex.com', 
                'nude.com', 'mature.com', 'rule34.xxx', 'porno', 'rule34', 
                'Cp', 'gay', 'pendejo', 'mierda', 'idiota', 'zorra', 'estupido', 
                'estupida', 'maricon', 'animeonegai', 'crunchyroll', 'animeflv', 
                'jkanime', 'MonosChinos'
            ]; 

            // Detectar URLs de imágenes en el contenido
            const imageUrlRegex = /(https?:\/\/.*\.(?:png|jpg|jpeg|gif))/ig; // 'g' para buscar todas las coincidencias
            const imageUrls = content.match(imageUrlRegex);

            // Validar si hay más de una imagen
            if (imageUrls && imageUrls.length > 1) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Solo puedes incluir una imagen por comentario.'
                });
                return;
            }

            // Verificar si el contenido contiene palabras prohibidas
            const containsForbiddenWords = forbiddenWords.some(word => {
                const wordRegex = new RegExp(word, 'i'); 
                return wordRegex.test(content);
            });

            if (containsForbiddenWords) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Tu comentario contiene palabras no permitidas.'
                });
                return;
            }

            if (content === '') {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Por favor, introduce un comentario válido.'
                });
                return;
            }

            // Convertir URLs de imágenes en etiquetas <img>
            const contentWithImages = content.replace(imageUrlRegex, (match, url) => {
                if (url.toLowerCase().endsWith('.gif')) {
                    return `<div class="gif-container" style="display: inline-block; position: relative;">
                                <img src="${url}" alt="GIF" style="max-width:100%;" class="gif-image" data-gif-src="${url}">
                                <canvas class="gif-canvas" style="display:none;"></canvas>
                                <div class="gif-overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); color: white; display: flex; align-items: center; justify-content: center;">GIF</div>
                            </div>`;
                } else {
                    return `<img src="${url}" alt="Imagen del comentario" style="max-width:100%;">`;
                }
            });

            // Enviar comentario al servidor
            fetch(`/anime/<%= anime.slug %>/comment`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ animeId: <%= anime.id %>, content: contentWithImages })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Comentario agregado',
                        showConfirmButton: false,
                        timer: 1400
                    });
                    document.getElementById('commentContent').value = '';
                    loadComments();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message
                    });
                }
            });
        });

        // Función para cargar y mostrar comentarios
        function loadComments() {
            fetch(`/anime/<%= anime.slug %>/comments?animeId=<%= anime.id %>`)
            .then(response => response.json())
            .then(comments => {
                const commentsList = document.getElementById('commentsList');
                commentsList.innerHTML = '';
                comments.forEach((comment, index) => {
                    const commentElement = document.createElement('div');
                    commentElement.className = 'comment-box mb-4 p-4 bg-gray-100 rounded opacity-0';
                    commentElement.innerHTML = `
                        <div class="flex items-center mb-2">
                            <img src="${comment.profile_image_url || '/default-profile-image.png'}" alt="${comment.username}" class="w-10 h-10 rounded-full mr-3 cursor-pointer">
                            <div>
                                <a href="/profile/${comment.username}" class="font-bold hover:text-indigo-600">${comment.username}</a>
                                <span class="text-sm font-normal"></span>
                                ${comment.is_admin ? '<span class="admin-badge">Admin</span>' : '<span class="member-badge">Member</span>'}
                                <p class="text-sm text-gray-500">${new Date(comment.created_at).toLocaleString()}</p>
                            </div>
                        </div>
                        <p class="mt-2">${comment.content}</p>
                    `;
                    commentsList.appendChild(commentElement);
                    
                    commentElement.querySelector('img').addEventListener('click', () => {
                        showUserModal(comment.username);
                    });

                    gsap.to(commentElement, {
                        opacity: 1,
                        y: 0,
                        duration: 0.5,
                        delay: index * 0.1,
                        ease: 'power2.out'
                    });
                });

                // Activar función de hover en los GIFs
                document.querySelectorAll('.gif-container').forEach(container => {
                    const overlay = container.querySelector('.gif-overlay');
                    const img = container.querySelector('.gif-image');
                    const canvas = container.querySelector('.gif-canvas');
                    
                    // Pausar el GIF inicialmente
                    pauseGif(img, canvas);
                    
                    container.addEventListener('mouseenter', () => {
                        overlay.style.display = 'none';
                        playGif(img, canvas);
                    });
                    
                    container.addEventListener('mouseleave', () => {
                        overlay.style.display = 'flex';
                        pauseGif(img, canvas);
                    });
                });
            });
        }

        // Función para pausar un GIF
        function pauseGif(img, canvas) {
            if (!img.complete) {
                img.addEventListener('load', () => pauseGif(img, canvas));
                return;
            }

            canvas.width = img.width;
            canvas.height = img.height;
            canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height);
            img.style.display = 'none';
            canvas.style.display = 'inline-block';
        }

        // Función para reproducir un GIF
        function playGif(img, canvas) {
            img.style.display = 'inline-block';
            canvas.style.display = 'none';
        }
  
        function showUserModal(username) {
            fetch(`/api/user/${username}`)
                .then(response => response.json())
                .then(user => {
                    document.getElementById('modalUserImage').src = user.profile_image_url || '/default-profile-image.png';
                    document.getElementById('modalUsername').textContent = user.username;
                    document.getElementById('modalUserEmail').textContent = user.email;
                    document.getElementById('modalUserBio').textContent = user.bio || 'No bio available';
                    document.getElementById('userModal').classList.remove('hidden');
                });
        }
    
        window.closeUserModal = function() {
            document.getElementById('userModal').classList.add('hidden');
        }
        
        loadAnimeData();
        loadComments();
    });
    
        // Añade esto al final de tu archivo anime-detail.js
    function updateViewCounter() {
        const animeId = document.getElementById('anime-id').value;
        const viewCounter = document.querySelector('.view-counter');
        const viewCountSpan = viewCounter.querySelector('.view-count');
    
        fetch(`/api/anime/${animeId}/views`)
            .then(response => response.json())
            .then(data => {
                viewCountSpan.textContent = data.views;
                viewCounter.classList.add('updating');
                setTimeout(() => {
                    viewCounter.classList.remove('updating');
                }, 500);
            });
    }
    
    // Actualizar cada 30 segundos
    setInterval(updateViewCounter, 30000);
            document.addEventListener('DOMContentLoaded', function() {
        const statusElement = document.getElementById('animeStatus');
        if (statusElement) {
            const status = statusElement.textContent.trim();
            if (status === 'En Emisión') {
                statusElement.classList.add('bg-green-500');
            } else if (status === 'Completado') {
                statusElement.classList.add('bg-blue-500');
            }
        }
    });
document.addEventListener('DOMContentLoaded', function() {
    const statusElement = document.getElementById('animeStatus');
    if (statusElement) {
        statusElement.addEventListener('mouseover', function() {
            this.style.transform = 'translateY(-5px) scale(1.05)';
        });

        statusElement.addEventListener('mouseout', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });

        // Animación inicial
        setTimeout(() => {
            statusElement.style.opacity = '0';
            statusElement.style.transform = 'translateY(-20px)';
            setTimeout(() => {
                statusElement.style.transition = 'all 0.5s ease';
                statusElement.style.opacity = '1';
                statusElement.style.transform = 'translateY(0)';
            }, 100);
        }, 500);
    }
});
    
    </script>
</body>
</html>
