<!DOCTYPE html>
<html lang="es" class="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Administrar Episodios - NakamaStream</title>
    <link rel="shortcut icon" href="/favicons/favicon-16x16.png" type="image/x-icon">
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://unpkg.com/feather-icons"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        pink: {
                            light: '#fce7f3',
                            DEFAULT: '#ec4899',
                            dark: '#be185d'
                        }
                    },
                    animation: {
                        float: 'float 6s ease-in-out infinite',
                        fadeIn: 'fadeIn 0.5s ease-in'
                    },
                    keyframes: {
                        float: {
                            '0%, 100%': { transform: 'translateY(0px)' },
                            '50%': { transform: 'translateY(-20px)' }
                        },
                        fadeIn: {
                            '0%': { opacity: '0' },
                            '100%': { opacity: '1' }
                        }
                    }
                }
            }
        }
    </script>
</head>
<body class="min-h-screen p-8 bg-gradient-to-br from-pink-100 to-white dark:from-gray-900 dark:to-gray-800 transition-colors duration-300">
    <!-- Botón de modo oscuro -->
    <div class="fixed top-4 left-4 z-50">
        <button id="darkModeToggle" class="p-2 rounded-lg bg-white dark:bg-gray-800 shadow-lg transition-all duration-300 hover:scale-110">
            <svg id="sunIcon" class="w-6 h-6 text-yellow-500 hidden dark:inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
            </svg>
            <svg id="moonIcon" class="w-6 h-6 text-gray-700 inline dark:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
            </svg>
        </button>
    </div>

    <div class="container mx-auto">
        <div class="bg-white dark:bg-gray-800 bg-opacity-90 dark:bg-opacity-90 backdrop-blur-lg p-8 rounded-2xl shadow-xl animate__animated animate__fadeIn">
            <h1 class="text-4xl font-bold mb-8 text-center text-pink-500 dark:text-pink-400">Administrar Episodios</h1>
            
            <!-- Barra de búsqueda -->
            <div class="mb-8">
                <div class="max-w-xl mx-auto">
                    <div class="relative">
                        <input 
                            type="text" 
                            id="searchInput"
                            placeholder="Buscar por nombre de anime o título de episodio..." 
                            class="w-full px-4 py-3 rounded-lg bg-white dark:bg-gray-700 border border-pink-200 dark:border-pink-900 focus:outline-none focus:ring-2 focus:ring-pink-500 dark:text-white placeholder-gray-400 dark:placeholder-gray-300"
                        >
                        <i data-feather="search" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    </div>
                </div>
            </div>

            <div class="mb-8 text-center">
                <a href="/admin/edit-episode" class="inline-flex items-center px-6 py-3 rounded-lg bg-pink-500 text-white hover:bg-pink-600 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg">
                    <i data-feather="plus-circle" class="mr-2"></i>
                    Agregar Nuevo Episodio
                </a>
            </div>

            <div id="animeContainer">
                <% if (typeof episodes !== 'undefined' && episodes.length > 0) { %>
                    <% 
                    // Agrupar episodios por anime
                    const animeGroups = {};
                    episodes.forEach(episode => {
                        if (!animeGroups[episode.anime_name]) {
                            animeGroups[episode.anime_name] = [];
                        }
                        animeGroups[episode.anime_name].push(episode);
                    });
                    %>

                    <% Object.entries(animeGroups).forEach(([animeName, animeEpisodes]) => { %>
                        <div class="anime-group mb-12 last:mb-0" data-anime="<%= animeName.toLowerCase() %>">
                            <!-- Cabecera del anime -->
                            <div class="flex items-center justify-between mb-6">
                                <div class="flex items-center">
                                    <h2 class="text-2xl font-bold text-pink-500 dark:text-pink-400"><%= animeName %></h2>
                                    <span class="ml-4 px-3 py-1 bg-pink-100 dark:bg-pink-900 text-pink-600 dark:text-pink-300 rounded-full text-sm">
                                        <%= animeEpisodes.length %> episodios
                                    </span>
                                </div>
                            </div>

                            <!-- Grid de episodios -->
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                <% animeEpisodes.sort((a, b) => a.episode_number - b.episode_number).forEach(episode => { %>
                                    <div class="episode-card bg-white dark:bg-gray-700 p-6 rounded-lg shadow-md transition-all duration-300 hover:-translate-y-2 hover:shadow-xl border border-pink-100 dark:border-pink-900" 
                                         data-anime="<%= episode.anime_name.toLowerCase() %>" 
                                         data-title="<%= episode.title.toLowerCase() %>">
                                        <div class="flex justify-between items-start mb-4">
                                            <span class="text-3xl font-bold text-pink-400 dark:text-pink-300">EP <%= episode.episode_number %></span>
                                            <span class="px-2 py-1 bg-pink-100 dark:bg-pink-900 text-pink-600 dark:text-pink-300 rounded-lg text-sm">
                                                <%= episode.duration || '24m' %>
                                            </span>
                                        </div>
                                        <h3 class="text-lg font-semibold mb-2 text-gray-800 dark:text-gray-200"><%= episode.title %></h3>
                                        <p class="text-sm text-gray-500 dark:text-gray-400 mb-4"><%= episode.description ? episode.description.substring(0, 100) + '...' : 'Sin descripción' %></p>
                                        <div class="flex justify-between items-center">
                                            <a href="/admin/edit-episode?id=<%= episode.id %>" class="inline-flex items-center px-4 py-2 rounded-md bg-pink-500 text-white hover:bg-pink-600 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-md">
                                                <i data-feather="edit" class="mr-2"></i>
                                                Editar
                                            </a>
                                            <button onclick="deleteEpisode(<%= episode.id %>)" class="inline-flex items-center px-4 py-2 rounded-md bg-gray-500 text-white hover:bg-gray-600 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-md">
                                                <i data-feather="trash-2" class="mr-2"></i>
                                                Eliminar
                                            </button>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="text-center">
                        <div class="p-8 bg-pink-50 dark:bg-gray-700 rounded-lg">
                            <p class="text-lg text-gray-600 dark:text-gray-300">No hay episodios disponibles.</p>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <script>
        feather.replace();

        // Configuración del modo oscuro
        const darkModeToggle = document.getElementById('darkModeToggle');
        const html = document.documentElement;

        if (localStorage.getItem('darkMode') === 'enabled') {
            html.classList.add('dark');
        }

        darkModeToggle.addEventListener('click', () => {
            html.classList.toggle('dark');
            localStorage.setItem('darkMode', html.classList.contains('dark') ? 'enabled' : 'disabled');
        });

        // Funcionalidad de búsqueda mejorada
        const searchInput = document.getElementById('searchInput');
        const episodeCards = document.querySelectorAll('.episode-card');
        const animeGroups = document.querySelectorAll('.anime-group');

        function filterContent(searchTerm) {
            searchTerm = searchTerm.toLowerCase();
            let hasVisibleContent = false;

            animeGroups.forEach(group => {
                const animeName = group.getAttribute('data-anime');
                const episodeCardsInGroup = group.querySelectorAll('.episode-card');
                let hasVisibleCards = false;

                episodeCardsInGroup.forEach(card => {
                    const animeName = card.getAttribute('data-anime');
                    const episodeTitle = card.getAttribute('data-title');
                    
                    if (animeName.includes(searchTerm) || episodeTitle.includes(searchTerm)) {
                        card.style.display = 'block';
                        hasVisibleCards = true;
                        hasVisibleContent = true;
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Mostrar/ocultar grupo completo
                group.style.display = hasVisibleCards ? 'block' : 'none';
            });

            // Manejar mensaje de no resultados
            const noResultsMessage = document.querySelector('.no-results-message');
            if (!hasVisibleContent) {
                if (!noResultsMessage) {
                    const message = document.createElement('div');
                    message.className = 'no-results-message text-center mt-8 animate-fadeIn';
                    message.innerHTML = `
                        <div class="p-8 bg-pink-50 dark:bg-gray-700 rounded-lg">
                            <p class="text-lg text-gray-600 dark:text-gray-300">No se encontraron episodios que coincidan con la búsqueda.</p>
                        </div>
                    `;
                    document.getElementById('animeContainer').appendChild(message);
                }
            } else if (noResultsMessage) {
                noResultsMessage.remove();
            }
        }

        // Implementar debounce para la búsqueda
        let debounceTimeout;
        searchInput.addEventListener('input', (e) => {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(() => {
                filterContent(e.target.value);
            }, 300);
        });

        function deleteEpisode(episodeId) {
            Swal.fire({
                title: '¿Estás seguro?',
                text: "No podrás revertir esta acción!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ec4899',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Sí, eliminar!',
                cancelButtonText: 'Cancelar',
                background: document.documentElement.classList.contains('dark') ? '#1f2937' : '#fff',
                color: document.documentElement.classList.contains('dark') ? '#fff' : '#374151'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/delete-episode/${episodeId}`, {
                        method: 'POST',
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: '¡Eliminado!',
                                text: 'El episodio ha sido eliminado.',
                                icon: 'success',
                                background: document.documentElement.classList.contains('dark') ? '#1f2937' : '#fff',
                                color: document.documentElement.classList.contains('dark') ? '#fff' : '#374151',
                                confirmButtonColor: '#ec4899'
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            throw new Error(data.message || 'No se pudo eliminar el episodio.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            title: 'Error!',
                            text: error.message || 'Ocurrió un error al eliminar el episodio.',
                            icon: 'error',
                            background: document.documentElement.classList.contains('dark') ? '#1f2937' : '#fff',
                            color: document.documentElement.classList.contains('dark') ? '#fff' : '#374151',confirmButtonColor: '#ec4899'
                        });
                    });
                }
            });
        }

        // Animación al cargar la página
        document.addEventListener('DOMContentLoaded', () => {
            const animeGroups = document.querySelectorAll('.anime-group');
            animeGroups.forEach((group, index) => {
                setTimeout(() => {
                    group.classList.add('animate__animated', 'animate__fadeInUp');
                }, index * 100);
            });
        });

        // Función para expandir/colapsar descripciones
        document.querySelectorAll('.episode-card').forEach(card => {
            const description = card.querySelector('p');
            if (description && description.textContent.includes('...')) {
                description.addEventListener('click', function() {
                    const fullText = this.getAttribute('data-full-text') || this.textContent;
                    const isExpanded = this.classList.contains('expanded');
                    
                    if (!this.getAttribute('data-full-text')) {
                        this.setAttribute('data-full-text', fullText);
                    }

                    if (isExpanded) {
                        this.textContent = fullText.substring(0, 100) + '...';
                        this.classList.remove('expanded');
                    } else {
                        this.textContent = fullText;
                        this.classList.add('expanded');
                    }
                });

                description.classList.add('cursor-pointer', 'hover:text-pink-500', 'transition-colors', 'duration-200');
            }
        });
    </script>
</body>
</html>
