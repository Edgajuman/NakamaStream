<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comment Management - NakamaStream</title>
    <link rel="shortcut icon" href="https://github.com/NakamaStream/Resources/blob/main/NakamStream-logo-HD-removebg.png?raw=true" type="image/x-icon">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Poppins', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            DEFAULT: '#ff6b6b',
                            dark: '#ff4757',
                        },
                        secondary: {
                            DEFAULT: '#5352ed',
                            dark: '#3742fa',
                        },
                    },
                },
            },
        }
    </script>
    <style>
        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .fade-in-up {
            animation: fadeInUp 0.6s ease-out forwards;
        }
        .comment-item {
            opacity: 0;
            transform: translateY(20px);
        }
        @keyframes shimmer {
            0% { background-position: -1000px 0; }
            100% { background-position: 1000px 0; }
        }
        .loading-shimmer {
            animation: shimmer 2s infinite linear;
            background: linear-gradient(to right, #f6f7f8 8%, #edeef1 18%, #f6f7f8 33%);
            background-size: 1000px 100%;
        }
        .hover-scale {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .hover-scale:hover {
            transform: scale(1.03);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        .pulse {
            animation: pulse 0.5s ease-in-out;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200 transition-colors duration-300">
    <nav class="bg-white dark:bg-gray-800 shadow-md sticky top-0 z-10 transition-colors duration-300">
        <div class="container mx-auto px-6 py-3 flex justify-between items-center">
            <a href="/admin/panel" class="text-2xl font-bold text-primary dark:text-primary-dark transition-colors duration-300">
                <i class="fas fa-tv mr-2"></i>NakamaStream Admin
            </a>
            <div class="flex items-center space-x-4">
                <button id="darkModeToggle" class="text-gray-600 dark:text-gray-300 hover:text-primary dark:hover:text-primary-dark transition-colors duration-300">
                    <i class="fas fa-moon text-2xl dark:hidden"></i>
                    <i class="fas fa-sun text-2xl hidden dark:inline"></i>
                </button>
                <a href="/logout" class="text-gray-600 dark:text-gray-300 hover:text-primary dark:hover:text-primary-dark transition-colors duration-300">
                    <i class="fas fa-sign-out-alt mr-2"></i>Logout
                </a>
            </div>
        </div>
    </nav>

    <main class="container mx-auto px-4 py-8">
        <h1 class="text-4xl font-bold mb-8 text-center text-primary dark:text-primary-dark fade-in-up">
            <i class="fas fa-comments mr-2"></i>Comment Administrator
        </h1>

        <div class="mb-8 fade-in-up" style="animation-delay: 0.2s;">
            <label for="animeSelect" class="block text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">
                <i class="fas fa-film mr-2"></i>Select Anime:
            </label>
            <div class="relative">
                <select id="animeSelect" class="w-full p-3 border rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-primary transition-all duration-300 appearance-none">
                    <option value="">All Animes</option>
                    <!-- Anime options will be populated dynamically -->
                </select>
                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700 dark:text-gray-300">
                    <i class="fas fa-chevron-down"></i>
                </div>
            </div>
        </div>

        <div class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 fade-in-up" style="animation-delay: 0.4s;">
            <div id="commentsList" class="space-y-6">
                <!-- Comments will be loaded here -->
            </div>
            <div id="pagination" class="mt-8 flex justify-center space-x-2">
                <!-- Pagination buttons will be added here -->
            </div>
        </div>
    </main>

    <script>
        // Dark mode toggle
        const darkModeToggle = document.getElementById('darkModeToggle');
        const html = document.documentElement;
        
        darkModeToggle.addEventListener('click', () => {
            html.classList.toggle('dark');
            localStorage.setItem('darkMode', html.classList.contains('dark'));
        });

        if (localStorage.getItem('darkMode') === 'true') {
            html.classList.add('dark');
        } else {
            html.classList.remove('dark');
        }

        // Comment management
        const animeSelect = document.getElementById('animeSelect');
        const commentsList = document.getElementById('commentsList');
        const pagination = document.getElementById('pagination');
        let currentPage = 1;
        const commentsPerPage = 10;

        function createLoadingShimmer() {
            const shimmer = document.createElement('div');
            shimmer.className = 'loading-shimmer h-24 rounded-lg mb-4';
            return shimmer;
        }

        // Load animes for the select dropdown
        function loadAnimes() {
            fetch('/api/animes')
                .then(response => response.json())
                .then(animes => {
                    animes.forEach(anime => {
                        const option = document.createElement('option');
                        option.value = anime.id;
                        option.textContent = anime.name;
                        animeSelect.appendChild(option);
                    });
                });
        }

        // Load comments based on selected anime and page
        function loadComments(page = 1) {
            commentsList.innerHTML = '';
            for (let i = 0; i < 5; i++) {
                commentsList.appendChild(createLoadingShimmer());
            }

            const animeId = animeSelect.value;
            fetch(`/api/comments?animeId=${animeId}&page=${page}&limit=${commentsPerPage}`)
                .then(response => response.json())
                .then(data => {
                    displayComments(data.comments);
                    displayPagination(data.totalPages, page);
                });
        }

        // Display comments in the list
        function displayComments(comments) {
            commentsList.innerHTML = '';
            comments.forEach((comment, index) => {
                const commentElement = document.createElement('div');
                commentElement.className = 'bg-gray-50 dark:bg-gray-700 p-6 rounded-lg shadow-md comment-item hover-scale';
                commentElement.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex-grow">
                            <div class="flex items-center mb-2">
                                <img src="${comment.profile_image || '/default-avatar.png'}" alt="${comment.username}" class="w-10 h-10 rounded-full mr-3">
                                <div>
                                    <p class="font-bold text-primary dark:text-primary-dark">${comment.username} <span class="text-sm font-normal text-gray-500 dark:text-gray-400">(${comment.user_rank})</span></p>
                                    <p class="text-sm text-gray-500 dark:text-gray-400">
                                        <i class="fas fa-tv mr-1"></i>${comment.anime_name} - 
                                        <i class="fas fa-film mr-1"></i>Episode ${comment.episode_number}
                                    </p>
                                </div>
                            </div>
                            <p class="mt-2 text-gray-700 dark:text-gray-300">${comment.content}</p>
                            <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
                                <i class="far fa-clock mr-1"></i>${formatDate(comment.created_at)}
                            </p>
                        </div>
                        <div class="flex space-x-2 ml-4">
                            <button onclick="deleteComment(${comment.id})" class="text-red-600 hover:text-red-800 dark:hover:text-red-400 transition-colors duration-300 transform hover:scale-110">
                                <i class="fas fa-trash-alt fa-lg"></i>
                            </button>
                            <button onclick="editComment(${comment.id})" class="text-blue-600 hover:text-blue-800 dark:hover:text-blue-400 transition-colors duration-300 transform hover:scale-110">
                                <i class="fas fa-edit fa-lg"></i>
                            </button>
                        </div>
                    </div>
                `;
                commentsList.appendChild(commentElement);
                setTimeout(() => {
                    commentElement.style.animation = `fadeInUp 0.6s ease-out ${index * 0.1}s forwards`;
                }, 0);
            });
        }

        // Display pagination buttons
        function displayPagination(totalPages, currentPage) {
            pagination.innerHTML = '';
            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.classList.add('px-4', 'py-2', 'rounded-full', 'bg-primary', 'text-white', 'hover:bg-primary-dark', 'transition-colors', 'duration-300', 'focus:outline-none', 'focus:ring-2', 'focus:ring-offset-2', 'focus:ring-primary-dark', 'transform', 'hover:scale-110');
                if (i === currentPage) {
                    button.classList.add('bg-primary-dark');
                }
                button.onclick = () => loadComments(i);
                pagination.appendChild(button);
            }
        }

        // Delete comment
        function deleteComment(commentId) {
            Swal.fire({
                title: '¿Estás seguro?',
                text: "No podrás revertir esta acción!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ff4757',
                cancelButtonColor: '#3742fa',
                confirmButtonText: 'Sí, eliminar!',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/api/comments/${commentId}`, { method: 'DELETE' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire(
                                    'Eliminado!',
                                    'El comentario ha sido eliminado.',
                                    'success'
                                );
                                loadComments(currentPage);
                            } else {
                                Swal.fire(
                                    'Error!',
                                    'No se pudo eliminar el comentario.',
                                    'error'
                                );
                            }
                        });
                }
            });
        }

        // Edit comment
        function editComment(commentId) {
            Swal.fire({
                title: 'Editar comentario',
                input: 'textarea',
                inputLabel: 'Nuevo contenido del comentario',
                inputPlaceholder: 'Escribe el nuevo contenido aquí...',
                showCancelButton: true,
                confirmButtonText: 'Guardar',
                cancelButtonText: 'Cancelar',
                showLoaderOnConfirm: true,
                preConfirm: (newContent) => {
                    return fetch(`/api/comments/${commentId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ content: newContent })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            throw new Error(data.message || 'Error al actualizar el comentario');
                        }
                        return data;
                    })
                    .catch(error => {
                        Swal.showValidationMessage(`Error: ${error.message}`);
                    });
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: '¡Actualizado!',
                        text: 'El comentario ha sido actualizado con éxito.',
                        icon: 'success'
                    });
                    loadComments(currentPage);
                }
            });
        }

        // Format date
        function formatDate(dateString) {
            const options = { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric', 
                hour: '2-digit', 
                minute: '2-digit', 
                hour12: true 
            };
            return new Date(dateString).toLocaleString('en-US', options);
        }

        // Event listeners
        animeSelect.addEventListener('change', () => loadComments());

        // Initial load
        loadAnimes();
        loadComments();
    </script>
</body>
</html>
